// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Zorg dat de output naar de hoofd node_modules map wijst
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Project Gerelateerde Modellen ---

model Project {
  id                 String  @id @default(cuid())
  slug               String  @unique // Voor URLs
  title              String
  shortDescription   String? @db.Text // Korte beschrijving voor lijsten/kaarten
  detailedContent    String  @db.Text // Uitgebreide beschrijving/case study voor detailpagina
  liveUrl            String?
  githubUrl          String?
  technologies       String[] // Gebruikte technologieÃ«n
  category           String? // Categorie voor filtering (bv. "Web Development", "UI/UX")
  isFeatured         Boolean @default(false) // Voor tonen op homepage
  order              Int?    // Optioneel voor custom sortering

  // SEO Velden
  metaTitle          String? // Custom title tag (anders fallback naar 'title')
  metaDescription    String? // Custom meta description (anders fallback naar 'shortDescription')

  // Relatie naar afbeeldingen
  images             ProjectImage[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Indexen voor snellere filtering/sortering
  @@index([isFeatured])
  @@index([category])
}

model ProjectImage {
  id        String  @id @default(cuid())
  url       String  // URL naar de afbeelding (bv. CDN link)
  altText   String  // Essentieel voor SEO en toegankelijkheid
  order     Int     @default(0) // Voor sortering van afbeeldingen binnen een project

  // Relatie naar Project
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // Cascade verwijdert afbeeldingen als project wordt verwijderd
  projectId String

  @@index([projectId]) // Index voor sneller ophalen van afbeeldingen per project
}


// --- Blog Gerelateerde Modellen ---

model Post {
  id                  String   @id @default(cuid())
  slug                String   @unique // Voor URLs
  title               String
  content             String   @db.Text // Volledige blog inhoud
  excerpt             String?  @db.Text // Korte samenvatting voor lijsten
  featuredImageUrl    String?  // URL voor uitgelichte afbeelding
  tags                String[] // Blog tags
  category            String?  // Blog categorie
  published           Boolean  @default(false) // Is de post gepubliceerd?
  publishedAt         DateTime? // Publicatie datum/tijd (zet bij publiceren)

  // SEO Velden
  metaTitle           String?  // Custom title tag
  metaDescription     String?  // Custom meta description
  featuredImageAltText String? // Alt text voor de uitgelichte afbeelding

  // Relatie naar Auteur (optioneel)
  // authorId            String?
  // author              User?    @relation(fields: [authorId], references: [id])

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Indexen voor snellere filtering/sortering
  @@index([published, publishedAt]) // Vaak samen gebruikt voor query's
  @@index([category])
  // @@index([authorId]) // Indien auteur relatie gebruikt wordt
}

// --- Optioneel User Model (voor Admin/Auth) ---

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  name          String?
  passwordHash  String // BELANGRIJK: Hash wachtwoorden altijd! (bv. met bcrypt)
  role          String  @default("ADMIN") // Voor nu alleen ADMIN rol
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relatie naar Posts (als auteur)
  // posts         Post[] // Voor nu uitgecommentarieerd
}

// --- Contact Formulier Inzendingen ---

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  isRead    Boolean  @default(false) // Optioneel: om bij te houden of het bericht gelezen is
  createdAt DateTime @default(now())

  @@index([createdAt]) // Index voor sorteren op datum
} 