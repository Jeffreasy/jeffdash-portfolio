'use server';

import { z } from 'zod';
import { logger } from '@/lib/logger';
import { createClient } from '@/lib/supabase/server';
import { revalidatePath } from 'next/cache';
import { validateAdminSession } from './auth';
import crypto from 'crypto';

// --- Types (Vereenvoudigd - TODO: Verbeteren) --- //
interface ContactSubmission {
    id: string;
    name: string;
    email: string;
    message: string;
    isRead: boolean; // Supabase kan dit als string of boolean geven
    createdAt: string; // Timestamp als string
}

// --- EXPORT type ---
export type ContactSubmissionType = ContactSubmission; // Gebruik de nieuwe interface

// Rate limiting configuration
const RATE_LIMIT_CONFIG = {
  maxAttempts: 5,
  windowMs: 60 * 60 * 1000, // 1 hour
};

// In-memory store for rate limiting
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();

// Rate limit helper functions
function checkRateLimit(ip: string): boolean {
  const now = Date.now();
  const record = rateLimitStore.get(ip);

  if (!record) {
    rateLimitStore.set(ip, { count: 1, resetTime: now + RATE_LIMIT_CONFIG.windowMs });
    return true;
  }

  if (now > record.resetTime) {
    rateLimitStore.set(ip, { count: 1, resetTime: now + RATE_LIMIT_CONFIG.windowMs });
    return true;
  }

  if (record.count >= RATE_LIMIT_CONFIG.maxAttempts) {
    return false;
  }

  record.count++;
  return true;
}

function getRemainingAttempts(ip: string): number {
  const record = rateLimitStore.get(ip);
  if (!record) return RATE_LIMIT_CONFIG.maxAttempts;
  if (Date.now() > record.resetTime) return RATE_LIMIT_CONFIG.maxAttempts;
  return Math.max(0, RATE_LIMIT_CONFIG.maxAttempts - record.count);
}

// Zod schema for contact form validation
const ContactFormSchema = z.object({
  name: z.string().min(2, { message: 'Naam moet minimaal 2 tekens bevatten.' }),
  email: z.string().email({ message: 'Ongeldig e-mailadres.' }),
  message: z.string().min(10, { message: 'Bericht moet minimaal 10 tekens bevatten.' }),
  selectedPlan: z.string().optional(), // Plan information as JSON string
});

// Type for the state of the contact form
export type ContactFormState = {
  success: boolean;
  message?: string;
  errors?: Partial<Record<keyof z.infer<typeof ContactFormSchema>, string[]>> & { general?: string[] };
};

// Helper functie om isRead correct te converteren
function normalizeContactSubmission(submission: any): ContactSubmissionType {
  return {
    ...submission,
    isRead: submission.isRead === true || submission.isRead === 'true' || submission.isRead === 't'
  };
}

/**
 * Handles the submission of a contact form with email integration.
 */
export async function submitContactForm(prevState: ContactFormState | undefined, formData: FormData): Promise<ContactFormState> {
  logger.info('Contact form submission started');
  const supabase = await createClient();

  try {
    // Get client IP (in production, replace with actual IP detection)
    const clientIp = '127.0.0.1'; // TODO: Replace with actual IP detection

    // Check rate limit
    if (!checkRateLimit(clientIp)) {
      const remainingTime = Math.ceil((rateLimitStore.get(clientIp)?.resetTime || 0 - Date.now()) / 1000 / 60);
      logger.warn('Rate limit exceeded for contact form', { clientIp, remainingTime });
      return {
        success: false,
        message: `Te veel pogingen. Probeer het over ${remainingTime} minuten opnieuw.`,
        errors: { general: ['Rate limit exceeded'] }
      };
    }

    // Extract and parse plan information
    const selectedPlanData = formData.get('selectedPlan');
    let planInfo = null;
    if (selectedPlanData && typeof selectedPlanData === 'string') {
      try {
        planInfo = JSON.parse(selectedPlanData);
        logger.info('Plan information included in contact form', { planInfo });
      } catch (error) {
        logger.warn('Invalid plan data format', { selectedPlanData });
      }
    }

    // Validate form data
    const validatedFields = ContactFormSchema.safeParse(Object.fromEntries(formData));
    if (!validatedFields.success) {
      logger.warn('Contact form validation failed', { errors: validatedFields.error.flatten().fieldErrors });
      return {
        success: false,
        message: 'Validatiefouten gevonden.',
        errors: validatedFields.error.flatten().fieldErrors,
      };
    }

    // Insert into database
    const { error } = await supabase
      .from('ContactSubmission')
      .insert({
        name: validatedFields.data.name,
        email: validatedFields.data.email,
        message: planInfo 
          ? `[${planInfo.name} - ${planInfo.price}]\n\n${validatedFields.data.message}`
          : validatedFields.data.message,
        isRead: false,
        // id and createdAt will be auto-generated by database defaults
      });

    if (error) throw error;

    // Send emails directly using Mailgun
    try {
      // Import the sendEmail function
      const { sendEmail } = await import('@/lib/mailgun');
      
      // Send confirmation email to user
      const userEmailResult = await sendEmail({
        to: validatedFields.data.email,
        from: 'no-reply@jeffdash.com',
        subject: 'Bedankt voor je bericht - Jeffrey Portfolio',
        html: `
          <!DOCTYPE html>
          <html lang="nl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Bedankt voor je bericht</title>
          </head>
          <body style="margin: 0; padding: 0; background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
            <div style="max-width: 600px; margin: 0 auto; background: #ffffff;">
              
              <!-- Header with gradient -->
              <div style="background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%); padding: 40px 30px; text-align: center;">
                <h1 style="margin: 0; color: #ffffff; font-size: 28px; font-weight: 900; letter-spacing: -0.5px;">
                  Jeffrey Portfolio
                </h1>
                <p style="margin: 8px 0 0 0; color: rgba(255, 255, 255, 0.9); font-size: 16px; font-weight: 500;">
                  Full-Stack Developer & Designer
                </p>
              </div>

              <!-- Main content -->
              <div style="padding: 40px 30px;">
                <div style="text-align: center; margin-bottom: 30px;">
                  <div style="display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%); padding: 12px 24px; border-radius: 50px; margin-bottom: 20px;">
                    <span style="color: #ffffff; font-size: 24px;">✓</span>
                  </div>
                  <h2 style="margin: 0; color: #1e293b; font-size: 24px; font-weight: 700;">
                    Bedankt voor je bericht!
                  </h2>
                </div>

                <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(6, 182, 212, 0.05) 100%); border: 1px solid rgba(59, 130, 246, 0.1); border-radius: 12px; padding: 24px; margin-bottom: 30px;">
                  <p style="margin: 0 0 16px 0; color: #374151; font-size: 16px; line-height: 1.6;">
                    Hallo <strong style="color: #1e293b;">${validatedFields.data.name}</strong>,
                  </p>
                  <p style="margin: 0 0 16px 0; color: #374151; font-size: 16px; line-height: 1.6;">
                    Bedankt voor je interesse in mijn werk. Ik heb je bericht ontvangen en neem binnen <strong>24 uur</strong> contact met je op.
                  </p>
                  ${planInfo ? `
                    <div style="background: linear-gradient(135deg, rgba(34, 197, 94, 0.1) 0%, rgba(16, 185, 129, 0.1) 100%); border: 1px solid rgba(34, 197, 94, 0.2); border-radius: 8px; padding: 16px; margin: 20px 0;">
                      <p style="margin: 0; color: #059669; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">
                        Je bent geïnteresseerd in:
                      </p>
                      <p style="margin: 8px 0 0 0; color: #1e293b; font-size: 18px; font-weight: 700;">
                        ${planInfo.name} - ${planInfo.price}
                      </p>
                    </div>
                  ` : ''}
                </div>

                <!-- What happens next -->
                <div style="background: #f8fafc; border-radius: 12px; padding: 24px; margin-bottom: 30px;">
                  <h3 style="margin: 0 0 16px 0; color: #1e293b; font-size: 18px; font-weight: 600;">
                    Wat gebeurt er nu?
                  </h3>
                  <div style="display: flex; align-items: flex-start; margin-bottom: 12px;">
                    <div style="background: #3b82f6; color: #ffffff; width: 24px; height: 24px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: 600; margin-right: 12px; flex-shrink: 0;">1</div>
                    <p style="margin: 0; color: #374151; font-size: 14px; line-height: 1.5;">
                      Ik bekijk je bericht en bereid een persoonlijke reactie voor
                    </p>
                  </div>
                  <div style="display: flex; align-items: flex-start; margin-bottom: 12px;">
                    <div style="background: #3b82f6; color: #ffffff; width: 24px; height: 24px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: 600; margin-right: 12px; flex-shrink: 0;">2</div>
                    <p style="margin: 0; color: #374151; font-size: 14px; line-height: 1.5;">
                      Je ontvangt binnen 24 uur een persoonlijke reactie
                    </p>
                  </div>
                  <div style="display: flex; align-items: flex-start;">
                    <div style="background: #3b82f6; color: #ffffff; width: 24px; height: 24px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: 600; margin-right: 12px; flex-shrink: 0;">3</div>
                    <p style="margin: 0; color: #374151; font-size: 14px; line-height: 1.5;">
                      We plannen een gesprek om je project te bespreken
                    </p>
                  </div>
                </div>

                <!-- Signature -->
                <div style="text-align: center; padding: 20px 0;">
                  <p style="margin: 0 0 8px 0; color: #374151; font-size: 16px; line-height: 1.6;">
                    Met vriendelijke groet,
                  </p>
                  <p style="margin: 0; color: #1e293b; font-size: 18px; font-weight: 700;">
                    Jeffrey Lavente
                  </p>
                  <p style="margin: 4px 0 0 0; color: #6b7280; font-size: 14px;">
                    Full-Stack Developer & Designer
                  </p>
                </div>

                <!-- CTA Button -->
                <div style="text-align: center; margin: 30px 0;">
                  <a href="https://jeffdash.com" style="display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%); color: #ffffff; text-decoration: none; padding: 14px 28px; border-radius: 8px; font-weight: 600; font-size: 16px; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);">
                    Bekijk mijn portfolio
                  </a>
                </div>
              </div>

              <!-- Footer -->
              <div style="background: #f8fafc; padding: 30px; text-align: center; border-top: 1px solid #e5e7eb;">
                <p style="margin: 0 0 12px 0; color: #6b7280; font-size: 14px;">
                  Jeffrey Portfolio - Professionele webdevelopment en design
                </p>
                <p style="margin: 0 0 16px 0; color: #6b7280; font-size: 12px;">
                  Dit is een automatisch gegenereerd bericht. Je kunt niet direct op deze email antwoorden.
                </p>
                <div style="margin-top: 20px;">
                  <a href="https://jeffdash.com" style="color: #3b82f6; text-decoration: none; font-size: 14px; margin: 0 12px;">Website</a>
                  <a href="https://jeffdash.com/projects" style="color: #3b82f6; text-decoration: none; font-size: 14px; margin: 0 12px;">Projecten</a>
                  <a href="https://jeffdash.com/contact" style="color: #3b82f6; text-decoration: none; font-size: 14px; margin: 0 12px;">Contact</a>
                </div>
              </div>
            </div>
          </body>
          </html>
        `,
        text: `Bedankt voor je bericht!\n\nHallo ${validatedFields.data.name},\n\nBedankt voor je interesse in mijn werk. Ik heb je bericht ontvangen en neem binnen 24 uur contact met je op.\n\n${planInfo ? `Je bent geïnteresseerd in: ${planInfo.name} - ${planInfo.price}\n\n` : ''}Wat gebeurt er nu?\n1. Ik bekijk je bericht en bereid een persoonlijke reactie voor\n2. Je ontvangt binnen 24 uur een persoonlijke reactie\n3. We plannen een gesprek om je project te bespreken\n\nMet vriendelijke groet,\nJeffrey Lavente\nFull-Stack Developer & Designer\n\nWebsite: https://jeffdash.com`
      });

      // Send notification email to Jeffrey  
      const fromEmail = planInfo ? 'sales@jeffdash.com' : 'contact@jeffdash.com';
      const notificationResult = await sendEmail({
        to: 'laventejeffrey@gmail.com', // Tijdelijk naar Gmail voor test
        from: fromEmail,
        subject: `${planInfo ? '💼 Nieuwe Plan Aanvraag' : '📧 Nieuw Contact Bericht'} van ${validatedFields.data.name}`,
        html: `
          <!DOCTYPE html>
          <html lang="nl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Nieuw Contact Bericht</title>
          </head>
          <body style="margin: 0; padding: 0; background: #f8fafc; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
            <div style="max-width: 600px; margin: 0 auto; background: #ffffff; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
              
              <!-- Header -->
              <div style="background: ${planInfo ? 'linear-gradient(135deg, #059669 0%, #10b981 100%)' : 'linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%)'}; padding: 30px; text-align: center;">
                <h1 style="margin: 0; color: #ffffff; font-size: 24px; font-weight: 700;">
                  ${planInfo ? '💼 Nieuwe Plan Aanvraag' : '📧 Nieuw Contact Bericht'}
                </h1>
                <p style="margin: 8px 0 0 0; color: rgba(255, 255, 255, 0.9); font-size: 14px;">
                  Jeffrey Portfolio Admin
                </p>
              </div>

              <!-- Client Info -->
              <div style="padding: 30px;">
                <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(6, 182, 212, 0.05) 100%); border: 1px solid rgba(59, 130, 246, 0.1); border-radius: 12px; padding: 24px; margin-bottom: 24px;">
                  <h2 style="margin: 0 0 20px 0; color: #1e293b; font-size: 18px; font-weight: 600; display: flex; align-items: center;">
                    <span style="background: #3b82f6; color: #ffffff; width: 32px; height: 32px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-size: 16px; margin-right: 12px;">👤</span>
                    Klant Informatie
                  </h2>
                  
                  <div style="display: grid; gap: 12px;">
                    <div style="display: flex; align-items: center;">
                      <span style="color: #6b7280; font-size: 14px; font-weight: 500; width: 80px; flex-shrink: 0;">Naam:</span>
                      <span style="color: #1e293b; font-size: 16px; font-weight: 600;">${validatedFields.data.name}</span>
                    </div>
                    <div style="display: flex; align-items: center;">
                      <span style="color: #6b7280; font-size: 14px; font-weight: 500; width: 80px; flex-shrink: 0;">Email:</span>
                      <a href="mailto:${validatedFields.data.email}" style="color: #3b82f6; font-size: 16px; text-decoration: none; font-weight: 500;">${validatedFields.data.email}</a>
                    </div>
                    <div style="display: flex; align-items: center;">
                      <span style="color: #6b7280; font-size: 14px; font-weight: 500; width: 80px; flex-shrink: 0;">Tijd:</span>
                      <span style="color: #1e293b; font-size: 14px;">${new Date().toLocaleString('nl-NL', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric', 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}</span>
                    </div>
                  </div>
                </div>

                ${planInfo ? `
                  <!-- Plan Info -->
                  <div style="background: linear-gradient(135deg, rgba(34, 197, 94, 0.1) 0%, rgba(16, 185, 129, 0.1) 100%); border: 1px solid rgba(34, 197, 94, 0.2); border-radius: 12px; padding: 24px; margin-bottom: 24px;">
                    <h3 style="margin: 0 0 16px 0; color: #059669; font-size: 16px; font-weight: 600; display: flex; align-items: center;">
                      <span style="background: #10b981; color: #ffffff; width: 28px; height: 28px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-size: 14px; margin-right: 10px;">💼</span>
                      Plan Interesse
                    </h3>
                    <div style="background: #ffffff; border-radius: 8px; padding: 16px; border: 1px solid rgba(34, 197, 94, 0.1);">
                      <p style="margin: 0; color: #1e293b; font-size: 18px; font-weight: 700;">
                        ${planInfo.name}
                      </p>
                      <p style="margin: 4px 0 0 0; color: #059669; font-size: 16px; font-weight: 600;">
                        ${planInfo.price}
                      </p>
                    </div>
                  </div>
                ` : ''}

                <!-- Message -->
                <div style="background: #f8fafc; border-radius: 12px; padding: 24px; margin-bottom: 30px;">
                  <h3 style="margin: 0 0 16px 0; color: #1e293b; font-size: 16px; font-weight: 600; display: flex; align-items: center;">
                    <span style="background: #6b7280; color: #ffffff; width: 28px; height: 28px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-size: 14px; margin-right: 10px;">💬</span>
                    Bericht
                  </h3>
                  <div style="background: #ffffff; border-radius: 8px; padding: 20px; border: 1px solid #e5e7eb; line-height: 1.6; color: #374151; font-size: 15px;">
                    ${validatedFields.data.message.replace(/\n/g, '<br>')}
                  </div>
                </div>

                <!-- Action Buttons -->
                <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
                  <a href="mailto:${validatedFields.data.email}?subject=Re: Je bericht via Jeffrey Portfolio&body=Hallo ${validatedFields.data.name},%0D%0A%0D%0ABedankt voor je bericht!" 
                     style="display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%); color: #ffffff; text-decoration: none; padding: 12px 24px; border-radius: 8px; font-weight: 600; font-size: 14px; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);">
                    📧 Beantwoord Direct
                  </a>
                  <a href="https://jeffdash.com/admin_area/contacts" 
                     style="display: inline-block; background: #6b7280; color: #ffffff; text-decoration: none; padding: 12px 24px; border-radius: 8px; font-weight: 600; font-size: 14px;">
                    📋 Bekijk in Admin
                  </a>
                </div>
              </div>

              <!-- Footer -->
              <div style="background: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;">
                <p style="margin: 0; color: #6b7280; font-size: 12px;">
                  Jeffrey Portfolio Admin Notificatie - ${new Date().toLocaleString('nl-NL')}
                </p>
              </div>
            </div>
          </body>
          </html>
        `,
        text: `${planInfo ? 'NIEUWE PLAN AANVRAAG' : 'NIEUW CONTACT BERICHT'}\n\nKlant: ${validatedFields.data.name}\nEmail: ${validatedFields.data.email}\nTijd: ${new Date().toLocaleString('nl-NL')}\n\n${planInfo ? `Plan: ${planInfo.name} - ${planInfo.price}\n\n` : ''}BERICHT:\n${validatedFields.data.message}\n\nBeantwoord direct: mailto:${validatedFields.data.email}`
      });

      if (userEmailResult.success && notificationResult.success) {
        logger.info('Contact emails sent successfully via direct Mailgun integration', {
          userEmail: {
            to: validatedFields.data.email,
            from: 'no-reply@jeffdash.com',
            success: userEmailResult.success
          },
          adminEmail: {
            to: 'laventejeffrey@gmail.com',
            from: fromEmail,
            success: notificationResult.success
          }
        });
      } else {
        logger.warn('Some emails failed to send', { 
          userEmailResult: {
            success: userEmailResult.success,
            error: userEmailResult.error
          }, 
          notificationResult: {
            success: notificationResult.success,
            error: notificationResult.error
          }
        });
      }
    } catch (emailError: any) {
      logger.warn('Email sending failed, but form was saved to database', { 
        error: emailError.message 
      });
    }

    logger.info('Contact form successfully submitted', { 
      clientIp, 
      planIncluded: !!planInfo,
      planName: planInfo?.name 
    });
    revalidatePath('/contact');
    return {
      success: true,
      message: planInfo 
        ? `Bedankt voor je interesse in ${planInfo.name}! We hebben je bericht ontvangen en je ontvangt een bevestigingsmail. We nemen zo snel mogelijk contact met je op voor meer details.`
        : 'Bericht succesvol verzonden! Je ontvangt een bevestigingsmail en we nemen zo snel mogelijk contact met je op.',
    };
  } catch (error: any) {
    logger.error('Failed to submit contact form', { error: error.message || error });
    return {
      success: false,
      message: 'Er is een fout opgetreden bij het verzenden van het bericht.',
      errors: { general: ['Server error'] }
    };
  }
}

/**
 * Gets all contact messages for the admin area.
 */
export async function getContactMessages() {
  logger.info('Fetching contact messages for admin');
  const supabase = await createClient();

  try {
    const { data, error } = await supabase
      .from('Contact')
      .select('*')
      .order('createdAt', { ascending: false });

    if (error) throw error;

    return data || [];
  } catch (error: any) {
    logger.error('Failed to fetch contact messages', { error: error.message || error });
    throw new Error('Kon contactberichten niet ophalen.');
  }
}

/**
 * Updates the status of a contact message.
 */
export async function updateContactStatus(messageId: string, newStatus: 'new' | 'read' | 'replied' | 'archived') {
  logger.info('Updating contact message status', { messageId, newStatus });
  const supabase = await createClient();

  try {
    const { error } = await supabase
      .from('Contact')
      .update({ status: newStatus, updatedAt: new Date().toISOString() })
      .eq('id', messageId);

    if (error) throw error;

    logger.info('Contact message status updated', { messageId, newStatus });
    revalidatePath('/admin_area/contact');
    return { success: true, message: 'Status succesvol bijgewerkt.' };
  } catch (error: any) {
    logger.error('Failed to update contact message status', { messageId, newStatus, error: error.message || error });
    return { success: false, message: 'Kon status niet bijwerken.' };
  }
}

/**
 * Deletes a contact message.
 */
export async function deleteContactMessage(messageId: string) {
  logger.info('Deleting contact message', { messageId });
  const supabase = await createClient();

  try {
    const { error } = await supabase
      .from('Contact')
      .delete()
      .eq('id', messageId);

    if (error) throw error;

    logger.info('Contact message deleted', { messageId });
    revalidatePath('/admin_area/contact');
    return { success: true, message: 'Bericht succesvol verwijderd.' };
  } catch (error: any) {
    logger.error('Failed to delete contact message', { messageId, error: error.message || error });
    return { success: false, message: 'Kon bericht niet verwijderen.' };
  }
}

// --- Actions voor Admin Area --- //

/**
 * Haalt alle contact inzendingen op voor de admin lijst.
 */
export async function getContactSubmissions(): Promise<ContactSubmissionType[]> {
  logger.info('Fetching all contact submissions for admin with Supabase');
  const supabase = await createClient();
  try {
    await validateAdminSession(); // Check admin rights - Re-enabled after RLS fix
    logger.info('Admin session validated for getContactSubmissions');

    const { data, error } = await supabase
      .from('ContactSubmission')
      .select('*')
      .order('createdAt', { ascending: false });

    if (error) throw error;

    logger.info(`Fetched ${data?.length ?? 0} contact submissions`);
    // Normalize the data to ensure isRead is a proper boolean
    const normalizedData = (data || []).map(normalizeContactSubmission);
    return normalizedData;
  } catch (error: any) {
    logger.error('Failed to fetch contact submissions', { error: error.message || error });
    throw new Error(error.message?.includes('Unauthorized') || error.message?.includes('Forbidden') ? error.message : 'Kon inzendingen niet ophalen.');
  }
}

/**
 * Wijzigt de 'isRead' status van een inzending.
 */
export async function toggleSubmissionReadStatus(submissionId: string): Promise<{ success: boolean; message?: string; newState?: boolean }> {
  logger.info('Toggling read status for submission with Supabase', { submissionId });
  const supabase = await createClient();
  try {
    const session = await validateAdminSession(); // Re-enabled after RLS fix
    logger.info('Admin session validated for toggling read status', { userId: session.userId, submissionId });

    // Haal huidige status op
    const { data: currentSubmission, error: fetchError } = await supabase
      .from('ContactSubmission')
      .select('isRead')
      .eq('id', submissionId)
      .single();

    if (fetchError || !currentSubmission) {
       if (fetchError?.code === 'PGRST116') throw new Error('Inzending niet gevonden.');
       throw fetchError || new Error('Kon huidige status niet ophalen.');
    }

    const newReadState = !currentSubmission.isRead;

    // Update de status
    const { error: updateError } = await supabase
      .from('ContactSubmission')
      .update({ isRead: newReadState })
      .eq('id', submissionId);

    if (updateError) throw updateError;

    logger.info('Read status successfully toggled', { submissionId, newReadState, userId: session.userId });
    revalidatePath('/admin_area/contacts');
    return {
      success: true,
      message: `Status gewijzigd naar ${newReadState ? 'gelezen' : 'ongelezen'}.`,
      newState: newReadState
    };

  } catch (error: any) {
    logger.error('Failed to toggle read status', { submissionId, error: error.message || error });
    let errorMessage = 'Kon status niet wijzigen door een serverfout.';
    if (error.message === 'Inzending niet gevonden.') {
      errorMessage = error.message;
    } else if (error.message?.includes('Unauthorized') || error.message?.includes('Forbidden')) {
      errorMessage = error.message;
    }
    return { success: false, message: errorMessage };
  }
}

/**
 * Verwijdert een contact inzending.
 */
export async function deleteContactSubmission(submissionId: string): Promise<{ success: boolean; message?: string }> {
  logger.info('Attempting to delete contact submission with Supabase', { submissionId });
  const supabase = await createClient();
  try {
    const session = await validateAdminSession(); // Re-enabled after RLS fix
    logger.info('Admin session validated for delete submission action', { userId: session.userId, submissionId });

    const { error } = await supabase
      .from('ContactSubmission')
      .delete()
      .eq('id', submissionId);

    if (error) throw error;

    logger.info('Contact submission successfully deleted', { submissionId, userId: session.userId });
    revalidatePath('/admin_area/contacts');
    return { success: true, message: 'Inzending succesvol verwijderd.' };

  } catch (error: any) {
    logger.error('Failed to delete contact submission', { submissionId, error: error.message || error });
    let errorMessage = 'Kon inzending niet verwijderen door een serverfout.';
    if (error.code === 'PGRST116') { // Check for Supabase 'not found'
       errorMessage = 'Inzending niet gevonden om te verwijderen.';
    } else if (error.message?.includes('Unauthorized') || error.message?.includes('Forbidden')) {
      errorMessage = error.message;
    }
    return { success: false, message: errorMessage };
  }
} 